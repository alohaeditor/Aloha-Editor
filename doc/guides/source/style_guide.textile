h2. JavaScript Style Guide

After reading this guide, you will be able to:

* Follow our naming conventions for files, variables and types.
* Use RequireJS in a clean way.
* Write clean JavaScript code that looks good.

endprologue.

h3. Code Conventions

WARNING: The current codebase does not yet follow all of these principles.

* We use only the +TAB+ character for indentation.
* We use +UpperCamelCase+ for class names, and +lowerCamelCase+ for method and property names.
* Methods and properties that begin with an underscore (+_+) are @private@.
* Variables which contain *jQuery* elements should be named like +$element+, starting with a @$@.
* We use +that+ as a name for a closure reference to +this+, but try to avoid it if there's the possibility of scope binding.
  Unfortunately jQuery's event handlers do not allow easy scope binding.

h3. Code Documentation

We use @JSDoc@ for code documentation. Please see +plugins/common/block/+ for an example on how to use this.

Further information about rendering documentation can be found in the "Documentation Guide":/documentation_guidelines.html.

h3. RequireJS module skeleton

All files which are RequireJS modules (scripts in +package/lib+) should follow this structure.

<javascript filename="package/lib/module.js">
/*!
 * Aloha Editor
 * Author & Copyright (c) 2011 Gentics Software GmbH
 * aloha-sales@gentics.com
 * Licensed unter the terms of http://www.aloha-editor.com/license.html
 */

define(['dependency'],
function(Dependency) {
	"use strict";

	// Declare exports

	return exports;
});
</javascript>

h3. Classes

WARNING: Not current anymore, we strive for a more JS - style.

Every class should go into one module which means one file. The filename should be lowercase, even if the class is camelcased.

<javascript filename="package/lib/classname.js">
/*!
 * Aloha Editor
 * Author & Copyright (c) 2011 Gentics Software GmbH
 * aloha-sales@gentics.com
 * Licensed unter the terms of http://www.aloha-editor.com/license.html
 */

define(['core/observable'],
function(Observable) {
	"use strict";

	/**
	 * Description of the class
	 *
	 * @class MyClass
	 */
	return Class.extend(Observable, {

		/**
		 * An optional constructor
		 *
		 * @method
		 * @constructor
		 */
		 _constructor: function() {

		 }

	});
});
</javascript>

But a module is not limited to expose a class. You could also export one of the following:

* Singletons (Class instances)
* Mixins (Class definition without @Class.extend@ call)

Or just about any other JavaScript value that is useful as a dependency.

h3. Singletons

All singletons should follow this structure:

<javascript>
/*!
 * Aloha Editor
 * Author & Copyright (c) 2011 Gentics Software GmbH
 * aloha-sales@gentics.com
 * Licensed unter the terms of http://www.aloha-editor.com/license.html
 */

define([],
function() {
	"use strict";

	return new (Class.extend({
		// Class definition here
	}))();
});
</javascript>

It will define a class and return a new instance that will be exported. Singletons are useful for global objects
that have state.

h3. RequireJS Dependency Order

TODO: Explain the order

* The base class
* Other Classes
* i18n
* i18nCore
* Text files
* vendor
* css

h3. Public API, Private methods and attributes

All methods and properties which are public API are marked with +@api+. The public API is supported
for a longer period by the Aloha Core Team, and when a public API changes, this is clearly communicated in the
Release Notes of a version.

On the contrary, we prefix +private+ methods and attributes with an underscore. The *user* of an API should never
override or call methods +private+ methods as they are not meant for him to be overridden.

There's also a type in between: methods which are not +private+ but do not have a +@api+ annotation. They
can be safely overridden by the user, and he should not experience any unwanted behavior. Still, the names or
functionality of these methods can change without notice between releases.
In the long run, all of these methods should become part of the public API, as soon as they are proven in real
life.

To sum it up, we have three types of methods/properties:

* +@api+ methods: Public API, the user of the object can rely on the functionality to be stable, changes in @api are clearly communicated
* non-@@api@ but also not private: The user can use it, but needs to be aware the method might still change.
* private (prefixed with +_+): The user should never ever call or access this. Very strange things might happen.

h3. Naming of methods

h4. Initialization Methods

Initialization methods should be named +init()+.

Good:

* +init()+
* +initSidebar()+

Bad:

* @initialize()@
* @initializeSidebar()@
* @start()@
* @run()@

h4. Shutdown methods

Shutdown methods should be named +destroy()+.

Good:

* +destroy()+

Bad:

* @shutdown()@
* @stop()@

h3. Changelog

* July 3, 2011: Initial version by "Sebastian Kurf√ºrst":credits.html#skurfuerst and "Christopher Hlubek":credits.html#hlubek
