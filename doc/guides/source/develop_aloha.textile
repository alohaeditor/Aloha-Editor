h2. Develop Aloha Editor

endprologue.

h3. Clone from Github

Fork it on github "Github repository":http://github.com/alohaeditor/Aloha-Editor, then:

<shell>
git clone git@github.com:YOURNAME/Aloha-Editor.git alohaeditor
cd alohaeditor
git checkout dev
</shell>

h3. Pre-commit hook

A precommit hook is provided in .githooks/pre-commit. This file has to
be symlinked or copied to .git/hooks/pre-commit to be effective.

The pre-commit hook will check for the most common mistakes like
'debugger;' or 'console.log();' statements.

The pre-commit hook will also invoke the jslint command on every
javascript file that is to be committed. You can get jslint via npm:

<shell>
npm install -g jslint
</shell>

For the appropriate flags please see .githooks/pre-commit.

All commits must be linted before being pushed, or the continous
integration build may break.

h3. Repository Directory Structure

* /
* /bin - build scripts
* /build - build configuration

* /doc
* /doc/api - the API documentation
* /doc/guides

* /vendor - third party libraries (e.g. jquery)
* /target - build output folder

* /src
* /src/css - Aloha core css files
* /src/demo - Aloha demos
* /src/img - Aloha core images

* /src/lib - Require plugins and bootstrap files
* /src/lib/aloha - Main Aloha Editor core sources
* /src/lib/vendor - third party libraries jquery
* /src/lib/util - utility libraries (e.g. json2.js, class.js)

* /src/plugins
* /src/plugins/common - Common plugin bundle
* /src/plugins/extra - Extra plugin bundle

* /src/test - QUnit tests


h3. Building  - Aloha Building

h4. Debian Linux / Mac OS X

* Install nodejs
See: http://nodejs.org

* Install npm
See: http://npmjs.org
<shell>
curl http://npmjs.org/install.sh | sh
</shell>


* Invoke Building:
<shell>
cd alohaeditor
mvn3 clean package
</shell>

You probably want to ommit building of the api and guides:
<shell>
mvn3 clean package -DbareMode=true
</shell>

You can also build just the css:
<shell>
mvn3 generate-sources
</shell>

The resulting css will be generated in src/css/aloha.css.

h4. Other OS: 
* Microsoft Windows: Not yet supported

h4. Customized Builds:

h5. Javavscript

Aloha-Editor uses maven to build a distributable package (includes
documentation etc.). To build just the javascript, it suffices to invoke
"r.js":https://github.com/jrburke/r.js/ from the command line. For example

<shell>
node build/r.js -o build/aloha/build.js
</shell>

To customize the build to your needs, you can modify the build profile
in build/aloha/build.js. The most likely customization you want to make
is to remove or add plugins from the 'include' property of the 'aloha'
module definition.

To include i18n files in your build, set the 'locale' property. If the
locale property is not set, the appropriate i18n files will be
loaded dynamically by requirejs. Remember to configure Aloha.locale
as well.

Unless you ask for plugins to be loaded that are not defined in the
build profile, or use a locale that was not defined during building, no
additional files should be downloaded by requirejs. In the future
requirejs may be replaced with an AMD stub such that requirejs is not
necessary for production deployments.

h5. CSS

Css building can be customized by adding or removing entries in
src/css/aloha-common-extra.css. If you removed or added plugins in the
r.js build profile, you also want to add or remove the appropriate css
import statement. Then, run

<shell>
mvn3 generate-sources
</shell>

The resulting css will be generated in src/css/aloha.css.

If you want to redefine modules in the build profile, for example if you
want to use your own jqueryui, please first read "Custom jQuery,
jQueryUI and other modules":dependencies.html

h3. Developing on Repository Browser

Currently it is needed to copy the build output of the repository-browser project (git@github.com:gentics/repository-browser.git) over the contents of alohaeditor/src/lib/vendor/repository-browser.
* Build the repository-browser project and overwrite the files of the named folder with the contents of the generated 'repository-browser-0.1-SNAPSHOT.zip' file.
 
h3. Developing CSS

src/css/aloha.css is a concatenated and minified version of
src/css/aloha-common-extra.css. To develop CSS without rebuilding the
CSS everytime, temporarily copy src/css/aloha-common-extra.css over
src/css/aloha.css.

Commiting the built CSS to the repository as the default CSS that is
loaded by the Aloha-Editor demos makes it possible to develop Aloha
without having to worry too much about the IE maximum stylesheet limit.

Every CSS class must have either an 'aloha-' prefix, or must be limited
to occur within an '.aloha' context. For example:

<css>
.aloha .new-style { ... }
.aloha-new-style { ... }
</css>

This is to avoid interference with the CSS of the host page.

If UI elements are added to the DOM with the purpose of absolute
positioning, which is common when implementing UI widgets, they should
be appended to the element exposed by the ui/context module:

<javascript>
define(['ui/context'], function(Context) {
    // preferably append it directly to the element
    Context.element.append(widgetx);
    // sometimes you need a selector instead
    elementx.widgetx({
        appendTo: Context.selector
    });
});
</javascript>

h3. Guides

* "Textile manual":http://redcloth.org/hobix.com/textile/

h4. Installation

h5. Debian Linux

<shell>
apt-get install build-essential
apt-get install ruby1.9.1-full
cd /usr/bin
ln -s ruby1.9.1  ruby
ln -s gem1.9.1  gem
gem install guides
ln -s /var/lib/gems/1.9.1/gems/guides-0.7.1/bin/guides /usr/bin/guides
guides preview 
</shell>

h5. Mac OSX

<shell>
gem install guides
</shell>

h5. Microsoft Windows

* "Download Guides.exe":http://guides-pkg.strobeapp.com/Guides.exe

h4. Using the Guides

* Preview Guides:
<shell>
cd alohaeditor/doc/guides
guides preview
</shell>

Preview URL: http://localhost:9292/

* Building Guides:
<shell>
guides build
</shell>
