h2. Aloha Editor Events

endprologue.

h3. Two event mechanisms

Aloha has two mechanisms for subscribing to and publishing events.

The old bind/trigger mechanism uses jQuery's bind() and trigger() behind
the scenes and currently handles most of the events fired by Aloha:

<javascript>
Aloha.bind('event-name', function (jQuery.Event, eventArgument) {});
Aloha.trigger('event-name', eventArgument);
</javascript>

We are now in the process of replacing this API with a PubSub mechanism
that we implement ourselves. The advantage of implementing it ourselves
is that we have greater flexibility when we need to make extensions to
the event system in the future. Also, the PubSub mechanism has less
overhead (important for IE7) and a slightly cleaner API (requirejs
module; forces a map argument; no event object).

<javascript>
define(['PubSub'], function (PubSub) {
    PubSub.sub('event.name', function (eventArgument) {});
    PusSub.pub('event.name', {key: value});
});
</javascript>

h3. Available events

h4. aloha-command-will-execute Event

This event is triggered before a command will be executed.
The commandId hold the command which should be executed (eg. bold).

<javascript>
Aloha.trigger( 'aloha-command-will-execute', {
	'commandId'			: , // the command as string
	'preventDefault'	: , // boolean; default: false
} );
</javascript>


h4. aloha-command-executed Event

This event is triggered after a command was executed with the +Engine.execCommand+ method.

<javascript>
Aloha.trigger( 'aloha-command-executed', // command as string );
</javascript>


h4. aloha-logger-ready Event

This event is triggered when the Aloha Editor logger is fully initialized.

<javascript>
Aloha.trigger( 'aloha-logger-ready' );
</javascript>

h4. aloha-log-full Event

This event is triggered when the Aloha Editor log history is fully (definded by +Aloha.settings.logHistory.maxEntries+).

<javascript>
Aloha.trigger( 'aloha-log-full' );
</javascript>


h4. aloha-ready Event

When Aloha Editor is fully initialized (the core, plugins and UI) the +aloha-ready+ event is triggered.

<javascript>
Aloha.trigger( 'aloha-ready' );
</javascript>

h4. aloha-editable-created Event

This event fires after a new editable has been created, eg. via +$( '#editme' ).aloha()+

<javascript>
Aloha.trigger( 'aloha-editable-created', [
	// jQuery object reference of an editable
] );
</javascript>


h4. aloha-editable-destroyed Event

This event fires after a new editable has been destroyed, eg. via +$( '#editme' ).mahalo()+

<javascript>
Aloha.trigger( 'aloha-editable-destroyed', [ 
	// jQuery object reference of an editable
] );
</javascript>


h4. aloha-editable-activated Event

This event notifies the system that an editable has been activated by clicking on it.

<javascript>
Aloha.trigger( 'aloha-editable-activated', {
	'oldActive'		: , //object of the editable
	'editable'		: , //object of the editable
} );
</javascript>


h4. aloha-editable-deactivated Event

When an editable has been deactivated by clicking on a non editable part of the page or on an other editable this event is triggered.

<javascript>
Aloha.trigger( 'aloha-editable-deactivated', {
	'editable'		: , //object of the editable
	'newEditable'	: , // object of the new editable (may be null)
} );
</javascript>


h4. aloha-smart-content-changed Event

A smart content change occurs when a special editing action, or a combination of interactions are performed by the user during the course of editing within an editable.

The smart content change event would therefore signal to any
component that is listening to this event, that content has been
inserted (or changed) into the editable that may need to be processed in a
special way. It even lets you know when an Aloha Block has changed (i.e. when any of its attributes have changed).
The smart content change event is also triggered after an idle period that follows
rapid, basic changes to the contents of an editable such as when the user is typing.

<javascript>
Aloha.trigger( 'aloha-smart-content-changed', {
	'editable'			: , // object of the editable
	'keyIdentifier'		: , // char | null
	'keyCode'			: , // char | null
	'char'				: , // char | null
	'triggerType'		: , // keypress, idle, blur, paste, block-change
	'snapshotContent'	: , // snapshot content of the editable as HTML String
} );
</javascript>


h4. aloha-block-selected Event

Processing of cursor keys will currently detect blocks (elements with contenteditable=false) and selects them (normally the cursor would jump right past them). This will also trigger the +aloha-block-selected+ event.

<javascript>
Aloha.trigger( 'aloha-block-selected', 
	// DOM object (range selection)
);
</javascript>


h4. aloha-selection-changed Event

This event is triggered when there are changes of the selection (using the mouse or cursor).

It is not recommended to bind to this event unless you know what you are
doing. Instead consider subscribing to 'aloha.selection.context-change'.

<javascript>
Aloha.trigger( 'aloha-selection-changed', [ 
	this.rangeObject, // range object
	event // browser event object
] );
</javascript>


h4. aloha.selection.context-change Event

  The argument to the event handler contains two properties

  * range the current value of Aloha.Selection.getRangeObject()
  * the event that caused the context change

  These values are the same as for aloha-selection-changed.

  The message will be published every time the context of the selection
  changes.

  The context of the selection changes whenever the startContainer node
  or endContainer node of any range in the selection returned by
  Aloha.getSelection() changes, or any of their ancestors change, or any
  attributes of the container nodes or their ancestors change. The
  ancestor tree is calculated up to including the containing Aloha
  editable.

  Subscribing to this event is preferred over aloha-selection-changed
  because it does not fire as often, and because it is not fired at all
  when the user is just typing. To be able to type without introducing
  perceptible lag is an important aspect of editor-performance;
  unnecessary processing should therefore be avoided whenever possible.

h3. Plugin: Image

Events provided by the Image Plugin.

h4. aloha-image-unselected Event

When an image is unselected by the user.

<javascript>
Aloha.trigger( 'aloha-image-unselected' );
</javascript>

h4. aloha-image-selected Event

When an image is selected by the user.

<javascript>
Aloha.trigger( 'aloha-image-selected' );
</javascript>

h3. Plugin: Link

Events provided by the Link Plugin.

h4. aloha-link-selected Event

Triggers when a link is selected. 

<javascript>
Aloha.trigger( 'aloha-link-selected' );
</javascript>

h4. aloha-link-unselected Event

Triggers when a link was selected and the selection is removed.

<javascript>
Aloha.trigger( 'aloha-link-unselected' );
</javascript>


h4. aloha-link-href-change Event

Triggers when a href attribute of a link is changed.

<javascript>
Aloha.trigger( 'aloha-link-href-change', {
	 'obj'			: , // jQuery object of link target
	 'href'			: , // URL of the repository item displayed to the user as string
	 'item'			: , // object of the repository item which is used
} );
</javascript>


h3. Plugin: Table

Events provided by the Table Plugin.

h4. aloha-table-selection-changed Event

Triggers when one or more cells of a table are selected or unselected.

<javascript>
Aloha.trigger( 'aloha-table-selection-changed' );
</javascript>

h4. aloha-table-activated Event

After an existing dom-table is transformed into an editable Aloha Editor table this event is triggered.

<javascript>
Aloha.trigger( 'aloha-table-activated' );
</javascript>

h3. Plugin: DragAndDropFiles

Events provided by the DragAndDropFiles Plugin.

h4. aloha-allfiles-upload-prepared Event

After all files are prepared for the upload (+aloha-file-upload-prepared+) this event is triggered.

<javascript>
Aloha.trigger( 'aloha-allfiles-upload-prepared' );
</javascript>


h4. aloha-drop-files-in-editable Event

Is triggerd when files are dropped into an editable part.

<javascript>
Aloha.trigger( 'aloha-drop-files-in-editable', {
	'filesObjs'		: , // object of dropped files
	'range'			: , // range object of the target
	'editable'		: , // jQuery object of the target editable
} );
</javascript>


h4. aloha-drop-files-in-page Event

Is triggerd when files are dropped into the page and not an editable.

<javascript>
Aloha.trigger( 'aloha-drop-files-in-page', // object of dropped files );
</javascript>


h4. aloha-file-upload-prepared Event

When a single file of many dropped files is ready for uploading.

<javascript>
Aloha.trigger( 'aloha-file-upload-prepared', // object of dropped files );
</javascript>


h4. aloha-upload-progress Event

When the upload is still in progress this event is triggered after each uploaded file.

<javascript>
Aloha.trigger( 'aloha-upload-progress', // Aloha.RepositoryDocument object );
</javascript>


h4. aloha-upload-success Event

A file is uploaded successfully.

<javascript>
Aloha.trigger( 'aloha-upload-success', // Aloha.RepositoryDocument object );
</javascript>

h4. aloha-upload-failure Event

An error occurred while file upload.

<javascript>
Aloha.trigger( 'aloha-upload-failure', // Aloha.RepositoryDocument object );
</javascript>

h4. aloha-upload-abort Event

An upload was aborted by the user or a script (IE/Safari only).

<javascript>
Aloha.trigger( 'aloha-upload-abort', // Aloha.RepositoryDocument object );
</javascript>

h4. aloha-upload-error Event

When there occurred an error while uploading the files this event is triggered.

<javascript>
Aloha.trigger( 'aloha-upload-error', // Aloha.RepositoryDocument object );
</javascript>

h3. Plugin: LinkBrowser

Events provided by the LinkBrowser Plugin.


h4. aloha-link-selected-in-linkbrowser Event

When a link is selected in the link browser this event is triggerd.

<javascript>
Aloha.trigger( 'aloha-link-selected-in-linkbrowser' , // Aloha );
</javascript>


<html>
<head>

</head>
<body>
<div id="content-editable">
   <p>Aloha World</p>
</div>

<button id="act">activate Editable</button>
<button id="deact">deactivate Editable</button>

<script type="text/javascript">
   Aloha.jQuery( '#act').click( function () {
       Aloha.jQuery( '#content-editable').aloha();
   });

   Aloha.jQuery( '#deact').click( function () {
       Aloha.jQuery( '#content-editable').mahalo();
   });

   Aloha.ready( function(){
       Aloha.bind( 'aloha-editable-created', function( jEvent, editable ) {
           console.log( 'editable "' + editable.getId() + '" created' );
       });
       Aloha.bind( 'aloha-editable-destroyed', function( jEvent, editable ) {
           console.log( 'editable "' + editable.getId() + '" destroyed' );
       });
       Aloha.bind( 'aloha-editable-deactivated', function( jEvent, aEvent ) {
           console.log( 'editable "' + aEvent.editable.getId() + '" deactivated' );
       });
       Aloha.bind( 'aloha-editable-activated', function( jEvent, aEvent){
           console.log( 'editable "' + aEvent.editable.getId() + '" activated' );
       });
   });
</script>
</body>
</html>
